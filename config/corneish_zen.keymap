/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_T 30 31 32 33 34 35

/ {
    chosen {
        zmk,matrix_transform = &five_column_transform;
    };
};

/ {
    behaviors {
        // Swapper for smart alt+tab

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings =
                <&kt LALT>,
                <&kp TAB>,
                <&kt LALT>;

            ignored-key-positions = <21>;
        };

        /**
         * Left hand positional hold tap, used for home block modifiers
         */

        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap-ms = <150>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        /**
         * Right hand positional hold tap, used for home block modifiers
         */

        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            global-quick-tap-ms = <150>;
            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <500>;
            quick-release;
        };
    };

    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BSPC>;
            key-positions = <27 28>;
        };

        quote_ukr_e {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <6 7>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <7 8>;
        };

        ukr_h_left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <4 14>;
        };

        ukr_ii_right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <5 15>;
        };

        windows_ukr_g {
            bindings = <&kp RA(U)>;
            key-positions = <20 21>;
        };

        ukr_e_vertical {
            bindings = <&kp SQT>;
            key-positions = <16 6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "QWERTY";
            bindings = <
         &kp Q        &kp W        &kp E         &kp R      &kp T              &kp Y         &kp U        &kp I        &kp O                 &kp P
  &hml LSHFT A  &hml LALT S  &hml LGUI D  &hml LCTRL F      &kp G              &kp H  &hmr LCTRL J  &hmr LGUI K  &hmr LALT L  &hmr RSHFT SEMICOLON
         &kp Z        &kp X        &kp C         &kp V      &kp B              &kp N         &kp M    &kp COMMA      &kp DOT              &kp FSLH
                                 &kp ESC         &mo 1  &kp SPACE    &skq LEFT_SHIFT         &mo 2    &kp ENTER
            >;
        };

        lower_layer {
            label = "NUMBER";
            bindings = <
  &kp ESCAPE  &kp GRAVE       &kp TAB        &kp ESCAPE  &kp PERCENT     &kp PLUS  &kp N7  &kp N8  &kp N9  &kp STAR
   &sk LSHFT   &sk LALT  &sk LEFT_GUI  &sk LEFT_CONTROL    &kp EQUAL    &kp MINUS  &kp N4  &kp N5  &kp N6  &kp FSLH
   &kp LC(Z)  &kp LC(X)     &kp LC(C)    &kp LC(K_COPY)    &kp UNDER       &kp N0  &kp N1  &kp N2  &kp N3   &kp DOT
                               &trans            &trans       &trans       &trans   &mo 3  &trans
            >;
        };

        raise_layer {
            label = "SYMBOL";
            bindings = <
        &kp EXCL    &kp AT      &kp HASH          &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS  &kp KP_MULTIPLY           &kp LPAR   &kp RPAR
  &sk LEFT_SHIFT  &sk LALT  &sk LEFT_GUI  &sk LEFT_CONTROL     &trans     &kp LEFT    &kp UP         &kp DOWN          &kp RIGHT  &kp MINUS
          &trans    &trans        &trans            &trans     &trans    &kp UNDER  &kp PLUS         &kp LBKT  &kp RIGHT_BRACKET   &kp PIPE
                                  &trans             &mo 3     &trans       &trans    &trans           &trans
            >;
        };

        control {
            bindings = <
        &trans        &trans        &trans        &trans        &trans    &kp F12  &kp F7  &kp F8  &kp F9           &trans
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F11  &kp F4  &kp F5  &kp F6  &kp RIGHT_SHIFT
    &bt BT_CLR   &bootloader  &out OUT_BLE  &out OUT_TOG        &trans    &kp F10  &kp F1  &kp F2  &kp F3           &trans
                                    &trans        &trans        &trans     &trans  &trans  &trans
            >;
        };
    };
};
